name: Deploy SAM Application

on:
  push:
    branches:
      - "*/*" # matches every branch containing a single '/'
      - "*"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: "3.12"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.setup.outputs.python-version }}

  run_tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r ./tests/requirements.txt

      - name: Run Unit Tests
        run: |
          python -m pytest ./tests/test_lambda_function_e2e.py

  build_application:
    needs: [run_tests, setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: Build SAM Application
        run: |
          sam build

  deploy_application:
    needs: [build_application, setup]
    runs-on: ubuntu-latest
    environment: ari-aws-dev
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "eu-west-2"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
      - name: Deploy SAM Application
        # env:
        #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #   AWS_REGION: "eu-west-2"
        run: |
          sam build
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name versionvault-app --capabilities CAPABILITY_IAM --region eu-west-2 --resolve-s3
          aws cloudformation describe-stacks --stack-name versionvault-app --region eu-west-2 --query "Stacks[0].Outputs" --output table

      - name: Fetch S3 Bucket Name from CloudFormation
        id: fetch-bucket-name
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name MyStackName --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)
          echo "::set-output name=bucket_name::$BUCKET_NAME"

      - name: Deploy to S3
        run: aws s3 sync ./html s3://${{ steps.fetch-bucket-name.outputs.bucket_name }} --delete
        # The --delete flag removes files in S3 that are not present in the local directory

  verify_deployment:
    needs: [build_application, setup, deploy_application]
    runs-on: ubuntu-latest
    environment: ari-aws-dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
      - name: Test API via API Gateway Endpoint
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "eu-west-2"
        run: |
          API_URL=$(aws cloudformation describe-stacks --stack-name versionvault-app --region eu-west-2 --query "Stacks[0].Outputs[?OutputKey=='ApiGatewayUrl'].OutputValue" --output text)
          curl -X POST "${API_URL}/create?app_name=secure_app3&secure=true"
