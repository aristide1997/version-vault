AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 40

Parameters:
  DomainName:
    Type: String
    Description: "The domain name of website"
    Default: "versionvault.top"
  HostedZoneId:
    Type: String
    Description: "The hosted zone id of domain"
    Default: "Z07572782YB0HUAHR4GZ4"
  AcmCertificateArn:
    Type: String
    Description: "The certificate arn for the domain name provided"
    Default: "arn:aws:acm:us-east-1:211125347335:certificate/707440a5-8021-432e-b021-01f80a327609"

Resources:
  VersioningTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VersioningApp
      AttributeDefinitions:
        - AttributeName: appName
          AttributeType: S
      KeySchema:
        - AttributeName: appName
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  VersioningFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: versioning.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          IS_LOCAL: "false"
          TABLE_NAME: !Ref VersioningTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VersioningTable
      Events:
        CreateApp:
          Type: Api
          Properties:
            Path: /create
            Method: post
        GetVersion:
          Type: Api
          Properties:
            Path: /{app_name}/version
            Method: get
        BumpVersion:
          Type: Api
          Properties:
            Path: /{app_name}/bump
            Method: post
        SetVersion:
          Type: Api
          Properties:
            Path: /{app_name}/set
            Method: post

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: versionvault-dev-static-hosting-bucket
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}"

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${WebsiteBucket}.s3.${AWS::Region}.amazonaws.com"
            Id: bucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        DefaultCacheBehavior:
          TargetOriginId: bucketOrigin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
          Compress: true
          AllowedMethods:
            - HEAD
            - GET
        Aliases:
          - !Ref DomainName
          - !Sub www.${DomainName}
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
        DefaultRootObject: index.html
        Enabled: true
        Comment: !Sub ${AWS::StackName} S3-hosted website via CloudFront

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt WebsiteDistribution.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2" # CloudFront hosted zone ID

  DnsRecordWWW:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub www.${DomainName}
      Type: A
      AliasTarget:
        DNSName: !GetAtt WebsiteDistribution.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2" # CloudFront hosted zone ID

Outputs:
  S3BucketName:
    Description: "The name of the S3 bucket for static hosting"
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub "${AWS::StackName}-S3BucketName"
  CloudFrontURL:
    Description: "CloudFront Distribution URL"
    Value: !GetAtt WebsiteDistribution.DomainName
  CloudFrontDistributionId:
    Description: "ID of the CloudFront Distribution"
    Value: !GetAtt WebsiteDistribution.Id
  ApiGatewayUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
