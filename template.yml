AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 40

Parameters:
  # DomainName:
  #   Type: String
  #   Description: Domain name
  # HostedZoneId:
  #   Type: String
  #   Description: Hosted zone ID
  BucketName:
    Type: String
    Description: The name of the S3 bucket for hosting the static website
    Default: versioning-app-dev-static-website-bucket
  CFDistributionPriceClass:
    Type: String
    Default: PriceClass_All
    AllowedValues:
      - PriceClass_All
      - PriceClass_100
      - PriceClass_200
    Description: Price class for CloudFront distribution

Resources:
  VersioningTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VersioningApp
      AttributeDefinitions:
        - AttributeName: appName
          AttributeType: S
      KeySchema:
        - AttributeName: appName
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  VersioningFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: versioning.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          IS_LOCAL: "false"
          TABLE_NAME: !Ref VersioningTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VersioningTable
      Events:
        CreateApp:
          Type: Api
          Properties:
            Path: /create
            Method: post
        GetVersion:
          Type: Api
          Properties:
            Path: /{app_name}/version
            Method: get
        BumpVersion:
          Type: Api
          Properties:
            Path: /{app_name}/bump
            Method: post
        SetVersion:
          Type: Api
          Properties:
            Path: /{app_name}/set
            Method: post

StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  StaticSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticSiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Principal:
              AWS: !GetAtt CFOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub 'arn:aws:s3:::${StaticSiteBucket}/*'

  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref "AWS::StackName"

  StaticSiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt StaticSiteBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CFOriginAccessIdentity}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        DefaultRootObject: index.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /error.html
            ResponseCode: 200
          - ErrorCode: 404
            ResponsePagePath: /error.html
            ResponseCode: 200
        Logging:
          IncludeCookies: false
          Bucket: !Sub 'logs-${AWS::Region}.amazonaws.com'
          Prefix: cf-logs

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  WebsiteURL:
    Description: "The URL of the static website"
    Value: !GetAtt StaticSiteDistribution.DomainName